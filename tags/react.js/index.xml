<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React.js on TzuWei's Blog 🐠</title><link>https://blog.uier.tw/tags/react.js/</link><description>Recent content in React.js on TzuWei's Blog 🐠</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Thu, 29 Jul 2021 18:13:04 +0800</lastBuildDate><atom:link href="https://blog.uier.tw/tags/react.js/index.xml" rel="self" type="application/rss+xml"/><item><title>筆記 React.js 中 useMemo Hook</title><link>https://blog.uier.tw/posts/20210729-react-memorize/</link><pubDate>Thu, 29 Jul 2021 18:13:04 +0800</pubDate><guid>https://blog.uier.tw/posts/20210729-react-memorize/</guid><description>前言 暑假回去公司實習時把 React 文件拿出來重新複習一次，順便在一些可以優化的地方使用 useMemo, useCallback，順手做個紀錄。
被計算出來的狀態使用 useMemo 範例：計算按鈕何時應啟用 disabled 樣式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Before: 自己寫 useEffect 去監聽依賴，在依賴變動時重新賦值 const [input, setInput] = useState(&amp;#39;&amp;#39;) const [isInputError, setIsInputError] = useState(false) const [isBtnDisabled, setIsBtnDisabled] = useState(true) useEffect(() =&amp;gt; { setIsBtnDisabled(input === &amp;#39;&amp;#39; || isInputError) }, [input, isInputError]) // ------------------------------------------------------ // After: 使用 useMemo const [input, setInput] = useState(&amp;#39;&amp;#39;) const [isInputError, setIsInputError] = useState(false) const isBtnDisabled = useMemo(() =&amp;gt; { return (input === &amp;#39;&amp;#39; || isInputError) }, [input, isInputError]) useMemo 也可以 memorize 一個 functional component</description></item></channel></rss>